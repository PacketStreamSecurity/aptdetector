""":class:`CuckooSandbox` is a wrapper over CuckooSandbox API"""
from aptdetector.malware.analyser import BaseAnalayser
from aptdetector.utils.typecheck import params
import json
import requests
from validators import url as urlVaildator


class CuckooSandbox(BaseAnalayser):
    """basic wrapper over CuckooSandbox"""

    def __init__(self, address):
        """initilize :class:`CuckooSandbox`"""
        super(CuckooSandbox, self).__init__(address)
        self.supportedHash = ["md5", "sha1", "sha256"]
        if not urlVaildator(address, require_tld=False):
            raise RuntimeError("Illigal URL exception" + str(address))

    def serverStatus(self):
        """CuckooSandbox /cuckoo/status API"""
        # http://172.16.201.182:8000/api/files/view/sha256/3f619cd8d17fa992bdb14ae2a124f09f682cea9e599d03ebce46e1413ee078fe
        # http://172.16.201.182:8000/api/tasks/get/iocs/16
        # http://172.16.201.182:8000/api/tasks/view/16
        resp = requests.get(self.serverAddress + "/cuckoo/status",
                            verify=self.validateSSL)
        if resp.status_code != 200:
            # This means something went wrong.
            print("error")
            return None
        else:
            parsed_json = json.loads(resp.text)
            print("Cuckoo [" + str(parsed_json['data']['version']) +
                  "] running on [" + str(parsed_json['data']['hostname']) +
                  "] with [" + str(parsed_json['data']['machines']['available']) +
                  "] machines with error_status=[" + str(parsed_json['error']) +
                  "] and finished [" + str(parsed_json['data']['tasks']['total']) +
                  "] total tasks.")
            return resp.text

    @params(self=object, hash=str)
    def files_view(self, hash):
        """CuckooSandbox /files/view/ API"""
        hash_type = self.hash_type(hash)
        if hash_type is None or hash_type not in self.supportedHash:
            return None
        else:
            resp = requests.get(self.serverAddress + "/files/view/" + hash_type + "/" + hash, verify=self.validateSSL)
            if resp.status_code != 200 or 'Sample not found in database' in resp.text:
                # This means something went wrong.
                return None
            else:
                parsed_json = json.loads(resp.text)
                return parsed_json

    @params(self=object, hash=str)
    def tasks_search(self, hash):
        """CuckooSandbox /tasks/search/ API"""
        hash_type = self.hash_type(hash)
        if hash_type is None or hash_type not in self.supportedHash:
            return None
        else:
            resp = requests.get(self.serverAddress + "/tasks/search/" + hash_type + "/" + hash, verify=self.validateSSL)
            if resp.status_code != 200 or 'Sample not found in database' in resp.text:
                # This means something went wrong.
                return None
            else:
                parsed_json = json.loads(resp.text)
                return parsed_json
